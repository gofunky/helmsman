# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
    - image: gofunky/helmsman:test
    steps:
      - checkout
      - run:
          name: Build helmsman
          command: |
            echo "fetching dependencies ..."
            go get -t -d -v ./...
            echo "building ..."
            TAG=$(git describe --abbrev=0 --tags)-$(date +"%d%m%y")
            go build -ldflags '-X main.version='$TAG' -extldflags "-static"' -o helmsman .
      - run:
          name: Make helmsman executable
          command: chmod +x helmsman
      - save_cache:
          key: bin-{{ checksum "Gopkg.lock" }}-{{ checksum "helmsman" }}
          paths:
          - helmsman
  
  test:
    docker:
    - image: gofunky/helmsman:test
    steps:
      - checkout 
      - run:
          name: Unit test helmsman  
          command: |
            echo "fetching dependencies ..."
            go get -t -d -v ./...
            echo "init Helm..."
            helm init --client-only
            echo "running tests ..."
            go test -v

  kube-test:
    machine: true
    workDir: ~/app
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
      K8S_VERSION: v1.10.0
      MINIKUBE_VERSION: v0.28.2
    steps:
    - checkout
    - run:
        name: setup kubectl
        command: |
          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    - run:
        name: setup minikube
        command: |
          curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
    - run:
        command: |
          sudo minikube config set WantReportErrorPrompt false
          sudo -E minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=${K8S_VERSION} --extra-config=apiserver.Authorization.Mode=RBAC
    - run:
        command: |
          JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until sudo kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
    - restore_cache:
        key: bin-{{ checksum "Gopkg.lock" }}-
    - run:
        command: |
          sudo chmod +x helmsman
          ./helmsman
          sudo ./helmsman -apply -f test_files/example_chart/test.toml
    - run:
        command: |
          sudo kubectl get deployment


workflows:
  version: 2
  build-test-push-release:
    jobs:
      - build
      - test
      - kube-test:
          requires:
          - build
